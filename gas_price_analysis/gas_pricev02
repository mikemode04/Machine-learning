"""
Gas ETF (UNG) - Return Prediction with Lagged Linear Regression
---------------------------------------------------------------
En enkel ML-modell som prøver å predikere neste dags avkastning på naturgass-ETF (UNG)
basert på laggede returer. Dette viser et klassisk STK2100/ML-oppsett:

- Feature engineering: laggede returer
- Modell: lineær regresjon
- Evaluering: R² og MSE
- Visualisering av faktiske vs predikerte returer
"""

import pandas as pd
import yfinance as yf
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import numpy as np

# 1. Last ned data (Henry Hub spot proxy via ETF UNG)
data = yf.download("UNG", start="2018-01-01", end="2024-12-31")

# 2. Feature engineering: laggede returer
data["Return"] = data["Close"].pct_change()
data["Lag1"] = data["Return"].shift(1)
data["Lag2"] = data["Return"].shift(2)

# Drop NaN
data = data.dropna()

# 3. Definer X og y
X = data[["Lag1", "Lag2"]]
y = data["Return"]

# 4. Lineær regresjon
model = LinearRegression()
model.fit(X, y)

# 5. Prediksjon
data["Predicted"] = model.predict(X)

# 6. Evaluering
r2 = model.score(X, y)
mse = mean_squared_error(y, data["Predicted"])
print(f"R² score: {r2:.4f}")
print(f"Mean Squared Error: {mse:.6f}")

# 7. Plot actual vs predicted returns
plt.figure(figsize=(12,6))
plt.plot(data.index, data["Return"], label="Actual Return", alpha=0.6)
plt.plot(data.index, data["Predicted"], label="Predicted Return", alpha=0.8)
plt.legend()
plt.title("Gas ETF (UNG) - Return Prediction using Linear Regression (Lagged)")
plt.show()

# 8. Print koeffisienter
print("Coefficients:")
for feature, coef in zip(X.columns, model.coef_):
    print(f"{feature}: {coef:.6f}")
print(f"Intercept: {model.intercept_:.6f}")
